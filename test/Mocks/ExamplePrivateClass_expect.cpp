/*
 * This file has been auto-generated by CppUTestMock v0.3.1.
 *
 * Contents will NOT be preserved if it is regenerated!!!
 */

#include "ExamplePrivateClass_expect.hpp"

namespace expect { namespace ExamplePrivateClass$ {
MockExpectedCall& f2(CppUMockGen::Parameter<const ExamplePrivateClass*> __object__, CppUMockGen::Parameter<int> a, CppUMockGen::Parameter<int> b, int __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectOneCall("ExamplePrivateClass::f2");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<ExamplePrivateClass*>(__object__.getValue())); }
    if(a.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("a", a.getValue()); }
    if(b.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("b", b.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
MockExpectedCall& f2(unsigned int __numCalls__, CppUMockGen::Parameter<const ExamplePrivateClass*> __object__, CppUMockGen::Parameter<int> a, CppUMockGen::Parameter<int> b, int __return__)
{
    bool __ignoreOtherParams__ = false;
    MockExpectedCall& __expectedCall__ = mock().expectNCalls(__numCalls__, "ExamplePrivateClass::f2");
    if(!__object__.isIgnored()) { __expectedCall__.onObject(const_cast<ExamplePrivateClass*>(__object__.getValue())); }
    if(a.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("a", a.getValue()); }
    if(b.isIgnored()) { __ignoreOtherParams__ = true; } else { __expectedCall__.withIntParameter("b", b.getValue()); }
    __expectedCall__.andReturnValue(__return__);
    if(__ignoreOtherParams__) { __expectedCall__.ignoreOtherParameters(); }
    return __expectedCall__;
}
} }

